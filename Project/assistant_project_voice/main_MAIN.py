import os
import random
import sys
import speech_recognition
import pyttsx3
from selenium import webdriver

commands_dict = {
    'commands': {
        'greeting': ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é'],
        'create_task': ['–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '–∑–∞–º–µ—Ç–∫–∞'],
        'play_music': ['–≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É', '–¥–∏—Å–∫–æ—Ç–µ–∫–∞'],
        'restart_pc': ['–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä'],
        'shutdown_pc': ['–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä'],
        'cancel_restart_pc': ['–æ—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏'],
        'cancel_shutdown_pc': ['–æ—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è'],
        'open_browser': ['–±—Ä–∞—É–∑–µ—Ä'],
        'exit': ['–≤—ã–π—Ç–∏', '–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É', '–≤—ã—Ö–æ–¥']
    }
}


class Denys():
    def __init__(self):
        self.speaker = pyttsx3.init()
        self.speaker.setProperty('voice', 'russian')
        self.speaker.setProperty('rate', 150)
        self.sr = speech_recognition.Recognizer()
        self.sr.pause_threshold = 0.5
        
    def listen_command(self):
        """The function will return the recognized command"""
    
        try:
            with speech_recognition.Microphone() as mic:
                self.sr.adjust_for_ambient_noise(source=mic, duration=0.5)
                audio = self.sr.listen(source=mic)
                query = self.sr.recognize_google(audio_data=audio, language='ru-RU').lower()
                
            return query
        except speech_recognition.UnknownValueError:
            self.speaker.say('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏ –∫–æ–º–∞–Ω–¥—É')
            self.speaker.runAndWait()
    
    def greeting(self):
        """Greeting function"""
    
        self.speaker.say('–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥')
        self.speaker.runAndWait()
        
    def create_task(self):
        """Create a todo task"""
        
        self.speaker.say('–ß—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª?')
        self.speaker.runAndWait()
        
        query = self.listen_command()
            
        with open('todo-list.txt', 'a') as file:
            file.write(f'‚ùóÔ∏è {query}\n')

        self.speaker.say(f'–ó–∞–¥–∞—á–∞ {query} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ todo-list!')
        self.speaker.runAndWait()
        
    def play_music(self):
        """Play a random mp3 file"""
        
        files = os.listdir('music')
        random_file = f'music/{random.choice(files)}'
        os.system(f'xdg-open {random_file}')
        
        self.speaker.say(f'–¢–∞–Ω—Ü—É–µ–º –ø–æ–¥ {random_file.split("/")[-1]} üîäüîäüîä')
        self.speaker.runAndWait()
        
    def restart_pc(self):
        os.system('shutdown -r +5')
        
        self.speaker.say('–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ shutdown -c')
        self.speaker.runAndWait()
        
    def cancel_restart_pc(self):
        os.system('shutdown -c')
        
        self.speaker.say('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        self.speaker.runAndWait()    
        
    def shutdown_pc(self):
        os.system('shutdown +5')
        
        self.speaker.say('–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ shutdown -c')
        self.speaker.runAndWait()
        
    def cancel_shutdown_pc(self):
        os.system('shutdown -c')
        
        self.speaker.say('–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        self.speaker.runAndWait()
        
    def open_browser(self):
        self.speaker.say('–ö–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å?')
        self.speaker.runAndWait()
        
        self.options = webdriver.ChromeOptions()
        self.options.add_experimental_option('detach', True)
        self.driver = webdriver.Chrome(
            executable_path='driver_path',
            chrome_options=self.options
        )
        self.driver.implicitly_wait(1)
        self.driver.maximize_window()
        
        query = self.listen_command()
        
        if 'google' in query:
            self.speaker.say('–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
            self.speaker.runAndWait()
            
            query = self.listen_command()
            query = query.split()
            
            self.driver.get('https://www.google.com/search?q=' + '+'.join(query))
            self.speaker.say(f'–ü–æ–∏—Å–∫ –ø–æ {query} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
            self.speaker.runAndWait()
            
            return
            
        elif 'youtube' in query:
            self.speaker.say('–ß—Ç–æ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?')
            self.speaker.runAndWait()
            
            query = self.listen_command()
            query = query.split()
            
            self.driver.get('https://www.youtube.com/results?search_query=' + '+'.join(query))
            self.speaker.say(f'–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!')
            self.speaker.runAndWait()
            
            return
        
        else:
            self.speaker.say('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è')
            self.speaker.runAndWait()
            
            return
        
    def exit(self):
        self.speaker.say('See you soon! Goodbye!')
        self.speaker.runAndWait()
        sys.exit()
        
        
def main():
    bot_1 = Denys()
    sr = speech_recognition.Recognizer()
    
    while True:
        try:
            with speech_recognition.Microphone() as mic:
                sr.adjust_for_ambient_noise(source=mic, duration=0.5)
                audio = sr.listen(source=mic)
                query = sr.recognize_google(audio_data=audio, language='ru-RU').lower()
                
            for k, v in commands_dict['commands'].items():
                if query in v:
                    execute = getattr(bot_1, k)
                    execute()
        except Exception as _ex:
            print(_ex, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')
            sys.exit()
            

if __name__ == '__main__':
    main()
